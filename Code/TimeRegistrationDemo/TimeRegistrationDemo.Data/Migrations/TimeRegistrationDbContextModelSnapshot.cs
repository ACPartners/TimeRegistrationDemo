// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TimeRegistrationDemo.Data;

namespace TimeRegistrationDemo.Data.Migrations
{
    [DbContext(typeof(TimeRegistrationDbContext))]
    partial class TimeRegistrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("TimeRegistration")
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.HolidayRequestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HolidayRequestId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisapprovedReason")
                        .HasColumnName("DisapprovedReason")
                        .HasMaxLength(200);

                    b.Property<DateTime>("From")
                        .HasColumnName("From")
                        .HasColumnType("Date");

                    b.Property<string>("HolidayTypeId")
                        .IsRequired();

                    b.Property<bool>("IsApproved")
                        .HasColumnName("IsApproved");

                    b.Property<string>("Remarks")
                        .HasColumnName("Remarks")
                        .HasMaxLength(200);

                    b.Property<DateTime>("To")
                        .HasColumnName("To")
                        .HasColumnType("Date");

                    b.Property<long>("UserId");

                    b.HasKey("Id")
                        .HasName("PK_HolidayRequest");

                    b.HasIndex("HolidayTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("HolidayRequests");
                });

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.HolidayTypeEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("HolidayTypeId")
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasMaxLength(30);

                    b.HasKey("Id")
                        .HasName("PK_HolidayType");

                    b.ToTable("HolidayTypes");
                });

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("PK_User");

                    b.HasIndex("FirstName", "LastName")
                        .IsUnique()
                        .HasName("UK_User");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.UserRoleEntity", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UserRoleId")
                        .HasMaxLength(1);

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("PK_UserRole");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.UserUserRoleEntity", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("UserRoleId")
                        .HasColumnName("UserRoleId")
                        .HasMaxLength(1);

                    b.HasKey("UserId", "UserRoleId")
                        .HasName("PK_UserUserRole");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UsersUserRoles");
                });

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.HolidayRequestEntity", b =>
                {
                    b.HasOne("TimeRegistrationDemo.Data.Entities.HolidayTypeEntity", "HolidayType")
                        .WithMany("HolidayRequests")
                        .HasForeignKey("HolidayTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TimeRegistrationDemo.Data.Entities.UserEntity", "User")
                        .WithMany("HolidayRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TimeRegistrationDemo.Data.Entities.UserUserRoleEntity", b =>
                {
                    b.HasOne("TimeRegistrationDemo.Data.Entities.UserEntity", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TimeRegistrationDemo.Data.Entities.UserRoleEntity", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
